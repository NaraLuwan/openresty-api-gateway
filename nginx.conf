worker_processes 1;

pid /home/luwan/openresty/nginx/logs/nginx.pid;
error_log  /home/luwan/openresty/nginx/logs/error.log info;

events {
    use epoll;
    worker_connections  102400;
    multi_accept on;
    accept_mutex off;
}

http {
    lua_package_path "/home/luwan/openresty/lua/lib/?.lua;;";
    include       mime.types;
    default_type  application/octet-stream;

    #General Options
    server_names_hash_bucket_size 128;
    client_header_buffer_size 64k;
    large_client_header_buffers 4 128k;
    server_tokens off;
    ignore_invalid_headers   on;
    recursive_error_pages    on;
    server_name_in_redirect off;

    keepalive_timeout  65;

    log_format  main    '$remote_addr - $remote_user [$time_local] "$request" '
    '$status $body_bytes_sent "$http_referer" "X" '
    '"$host" $request_length $request_time "$upstream_response_time" "$upstream_addr" req_body:"$request_body"'
    '"$upstream_status" "$http_user_agent" "$http_x_forwarded_for" "$http_x_src_name"';

    access_log on;
    # 开启错误日志
    error_log on;
    access_log  /home/luwan/openresty/nginx/logs/access.log  main;

    sendfile on;
    # 提高I/O性能
    client_max_body_size 500m;
    tcp_nopush  on;
    tcp_nodelay on;

    #size limits
    gzip on;
    gzip_min_length  1k;
    gzip_buffers     4 16k;
    gzip_http_version 1.0;
    gzip_comp_level 2;
    gzip_types       text/plain application/x-javascript text/css application/xml;
    gzip_vary on;

    #cache begin
    proxy_buffering on;
    proxy_cache_valid any 10m;
    #proxy_cache_path /data/nginxcache levels=1:2 keys_zone=ng-cache:8m max_size=1000m inactive=600m;
    #proxy_temp_path /data/nginxtemp;
    proxy_buffer_size 4k;
    proxy_buffers 100 8k;
    open_file_cache max=65535 inactive=60s;
    open_file_cache_valid 80s;
    open_file_cache_min_uses 1;

    #healthcheck shared
    lua_shared_dict healthcheck 1m;
    lua_shared_dict abcliock 1m;

    upstream servers {
      server 127.0.0.1;
      balancer_by_lua_block{
        local balancer = require "balancer"
        balancer.balancing()
      }
      keepalive 32;
    }

    init_worker_by_lua_block{
        require "init"
    }

    server {
        listen  8080  default_server;
        server_name localhost;

        location / {
            set $backend_host '127.0.0.1';
            set $backend_port 80;
            set $newhost '';
            set $upstream 'http://servers';
            access_by_lua_block{
                local access = require "access"
                access.dispatch()
            }
            proxy_set_header Host $newhost;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_http_version 1.1;
	          proxy_set_header Connection "";
            proxy_pass $upstream;
        }
        error_log logs/error.log;
    }
}
